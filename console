#!/usr/bin/env/php 

<?php

/**
 * @copyright 2021 - N'Guessan Kouadio ElisÃ©e (eliseekn@gmail.com)
 * @license MIT (https://opensource.org/licenses/MIT)
 * @link https://github.com/eliseekn/tinymvc
 */

/**
 * Application command line interface
 */

require 'vendor/autoload.php';
require 'bootstrap.php';

array_shift($argv);

function color(string $text, string $fg = 'white', string $bg = 'black')
{
    switch ($fg) {
        case 'brown':
            $fg = '0;33';
            break;

        case 'green':
            $fg = '0;32';
            break;

        case 'blue':
            $fg = '0;34';
            break;
            break;

        case 'red':
            $fg = '0;31';
            break;

        default:
            $fg = '1;37';
            break;
    }

    switch ($bg) {
        case 'red':
            $bg = '41';
            break;

        case 'black':
            $bg = '40';
    }

    return "\e[{$fg};{$bg}m{$text}\e[0m";
}

function commands_list()
{
    $help_message = color('db', 'brown') . PHP_EOL;
    $help_message .= "  " . color('db:schema', 'green') . " " . color('--create', 'blue') . " database               Create new databases" . PHP_EOL;
    $help_message .= "  " . color('db:schema', 'green') . " " . color('--delete', 'blue') . " database               Delete databases" . PHP_EOL;
    $help_message .= "  " . color('db:migration', 'green') . " " . color('--run', 'blue') . "                        Migrate all tables" . PHP_EOL;
    $help_message .= "  " . color('db:migration', 'green') . " " . color('--run', 'blue') . " table                  Migrate single table" . PHP_EOL;
    $help_message .= "  " . color('db:migration', 'green') . " " . color('--run', 'blue') . " " . color('--seed', 'blue') . "                 Migrate all tables and insert all seeds" . PHP_EOL;
    $help_message .= "  " . color('db:migration', 'green') . " " . color('--refresh', 'blue') . "                    Refresh all migrations" . PHP_EOL;
    $help_message .= "  " . color('db:migration', 'green') . " " . color('--refresh', 'blue') . " table              Refresh single table" . PHP_EOL;
    $help_message .= "  " . color('db:migration', 'green') . " " . color('--refresh', 'blue') . " " . color('--seed', 'blue') . "             Refresh all migrations and insert all seeds" . PHP_EOL;
    $help_message .= "  " . color('db:migration', 'green') . " " . color('--delete', 'blue') . "                     Drop all tables" . PHP_EOL;
    $help_message .= "  " . color('db:migration', 'green') . " " . color('--delete', 'blue') . " table               Drop single table" . PHP_EOL;
    $help_message .= "  " . color('db:migration', 'green') . " " . color('--list', 'blue') . "                       Display list of migrations tables" . PHP_EOL;
    $help_message .= "  " . color('db:seed', 'green') . " " . color('--run', 'blue') . "                             Insert all seeds" . PHP_EOL;
    $help_message .= "  " . color('db:seed', 'green') . " " . color('--run', 'blue') . " seed                        Insert single seed" . PHP_EOL;
    $help_message .= "  " . color('db:query', 'green') . " " . color('--execute', 'blue') . " 'query'                Execute MySQL query" . PHP_EOL;
    $help_message .= "  " . color('db:query', 'green') . " " . color('--execute', 'blue') . " 'query' " . color('--db', 'blue') . "=database  Execute MySQL query on the database 'database'" . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= color('make', 'brown') . PHP_EOL;
    $help_message .= "  " . color('make:controller', 'green') . " table                     Create new controller class" . PHP_EOL;
    $help_message .= "  " . color('make:controller', 'green') . " table " . color('--namespace', 'blue') . "=name    Create new controller class in namespace folder" . PHP_EOL;
    $help_message .= "  " . color('make:resources', 'green') . " table                      Create resources (controller, migration, repository, views and routes)" . PHP_EOL;
    $help_message .= "  " . color('make:migration', 'green') . " table                      Create new migration file" . PHP_EOL;
    $help_message .= "  " . color('make:migration', 'green') . " table " . color('--ms', 'blue') . "                 Create migration table with repository = m, seed = s" . PHP_EOL;
    $help_message .= "  " . color('make:repository', 'green') . " table                     Create new repository file" . PHP_EOL;
    $help_message .= "  " . color('make:seed', 'green') . " table                           Create new seed file" . PHP_EOL;
    $help_message .= "  " . color('make:view', 'green') . " name                            Create blank view template" . PHP_EOL; 
    $help_message .= "  " . color('make:view', 'green') . " name " . color('--layout', 'blue') . "=name              Create new view template file based layout" . PHP_EOL;
    $help_message .= "  " . color('make:view', 'green') . " name " . color('--layout', 'blue') . "                   Create new layout template file" . PHP_EOL;
    $help_message .= "  " . color('make:request', 'green') . " name                         Create request validator file" . PHP_EOL;
    $help_message .= "  " . color('make:middleware', 'green') . " name                      Create middleware file" . PHP_EOL;
    $help_message .= "  " . color('make:mail', 'green') . " name                            Create new email resource" . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= color('cache', 'brown') . PHP_EOL;
    $help_message .= "  " . color('cache:clear', 'green') . "                               Clear twig templates cache" . PHP_EOL;
    $help_message .=  PHP_EOL;
    $help_message .= color('app', 'brown') . PHP_EOL;
    $help_message .= "  " . color('app:setup', 'green') . "                                 Set up application" . PHP_EOL;
    $help_message .=  PHP_EOL;
    
    echo $help_message;
    exit();
}

function print_error(string $message, int $type = 0)
{
    if ($type === 0) {
        echo color("[-] Invalid command line argument " . $message . ". Type \"php console\" for commands list.", 'white', 'red');
        exit(PHP_EOL . PHP_EOL);
    } else {
        echo color("[-] Missing command line argument. Type \"php console\" for commands list.", 'white', 'red');
        exit(PHP_EOL . PHP_EOL);
    }
}

if (!isset($argv[0])) {
    commands_list();
}

if (strpos(strtolower($argv[0]), ':') === false) {
    print_error($argv[0]);
}

list($command, $option) = explode(':', $argv[0]);

switch ($command) {
    case 'db':
        $argument = $argv[1] ?? null;

        if (is_null($argument)) {
            print_error('', 1);
        }

        if (strpos(strtolower($argument), '--') === false) {
            print_error($argument);
        }

        $data = $argv[2] ?? null; 

        switch ($option) {
            case 'schema':
                switch ($argument) {
                    case '--create':
                        if (is_null($data)) {
                            print_error('', 1);
                        }

                        \Framework\Console\Database::createSchema($data);
                        exit(PHP_EOL);

                    case '--delete':
                        if (is_null($data)) {
                            print_error('', 1);
                        }

                        \Framework\Console\Database::dropSchema($data);
                        exit(PHP_EOL);

                    case '--list':
                        print_r(\Framework\Console\Database::listSchemas());
                        exit(PHP_EOL);

                    default:
                        print_error($argument);
                }

            case 'query':
                if ($argument !== '--execute') {
                    print_error($argument);
                }

                list($arg, $db) = isset($argv[3]) && strpos(strtolower($argv[3]), '=') !== false 
                    ? explode('=', $argv[3]) 
                    : (isset($argv[3]) ? [$argv[3], null] : [null, null]);

                $db = $arg === '--db' ? $db : null;

                if (!is_null($arg) && $arg !== '--db') {
                    print_error($arg);
                }

                \Framework\Console\Database::executeQuery($data, $db);
                exit(PHP_EOL);

            case 'migration':
                $data = !is_null($data) ? $data : '';
                $seed = !empty($data) && strpos(strtolower($data), '--') !== false ? $data : null;

                if (!is_null($seed) && $seed !== '--seed') {
                    print_error($seed);
                }

                $data = $data === '--seed' ? '' : $data;

                switch ($argument) {
                    case '--run':
                        \Framework\Console\Database::migrateTable($data);

                        if (!is_null($seed)) {
                            \Framework\Console\Database::runSeeder();
                        }

                        exit(PHP_EOL);

                    case '--refresh':
                        \Framework\Console\Database::refreshTable($data);

                        if (!is_null($seed)) {
                            \Framework\Console\Database::runSeeder();
                        }

                        exit(PHP_EOL);

                    case '--delete':
                        \Framework\Console\Database::deleteTable($data);
                        exit(PHP_EOL);

                    case '--list':
                        print_r(\Framework\Console\Database::getMigrationsTables());
                        exit(PHP_EOL);

                    default:
                        print_error($argument);
                }

            case 'seed':
                if ($argument !== '--run') {
                    print_error($argument);
                }

                $data = $data ?? '';

                \Framework\Console\Database::runSeeder($data);
                exit(PHP_EOL);

            default:
                print_error($option);
        }

    case 'make':
        $argument = $argv[2] ?? null;
        $data = $argv[1] ?? null; 

        switch ($option) {
            case 'controller':
                list($arg, $namespace) = isset($argument) && strpos(strtolower($argument), '=') !== false 
                    ? explode('=', $argument) 
                    : (isset($argument) ? [$argument, null] : [null, null]);

                if ($arg !== '--namespace') {
                    print_error($arg);
                }

                \Framework\Console\Make::createController($data, $namespace);

                exit(PHP_EOL);

            case 'migration':
                \Framework\Console\Make::createMigration($data);

                if (!is_null($argument)) {
                    if ($argument === '--r') {
                        \Framework\Console\Make::createRepository($data);
                    } else if ($argument === '--s') {
                        \Framework\Console\Make::createSeed($data);
                    } else if ($argument === '--rs' || $argument === '--sr') {
                        \Framework\Console\Make::createRepository($data);
                        \Framework\Console\Make::createSeed($data);
                    } else {
                        print_error($argument);
                    }
                }
                
                exit(PHP_EOL);

            case 'view':
                if (is_null($argument)) {
                    \Framework\Console\Make::createView($data);
                    exit();
                }

                $layout = $argument === '--layout';

                if ($layout) {
                    \Framework\Console\Make::createView(null, $data);
                } else {
                    list($arg, $layout) = isset($argument) && strpos(strtolower($argument), '=') !== false 
                        ? explode('=', $argument) 
                        : (isset($argument) ? [$argument, null] : [null, null]);

                    if ($arg !== '--layout') {
                        print_error($arg);
                    }

                    \Framework\Console\Make::createView($data, $layout);
                }

                exit(PHP_EOL);

            case 'repository':
                \Framework\Console\Make::createRepository($data);
                exit(PHP_EOL);

            case 'seed':
                \Framework\Console\Make::createSeed($data);
                exit(PHP_EOL);

            case 'mail':
                \Framework\Console\Make::createMail($data);
                exit(PHP_EOL);

            case 'middleware':
                \Framework\Console\Make::createMiddleware($data);
                exit(PHP_EOL);

            case 'request':
                \Framework\Console\Make::createRequest($data);
                exit(PHP_EOL);

            case 'resources':
                \Framework\Console\Make::createController($data, 'admin');
                \Framework\Console\Make::createMigration($data);
                \Framework\Console\Make::createRepository($data);
                \Framework\Console\Make::createSeed($data);
                \Framework\Console\Make::createViews($data);
                \Framework\Console\Make::createRoute($data);
                exit(PHP_EOL);

            default:
                print_error($option);
        }

    case 'cache':
        if ($option !== 'clear') {
            print_error($option);
        }

        \Framework\System\Storage::path(config('storage.cache'))->deleteDir();
        echo "\e[0;32;40m[+] Cache cleared succesfully\e[0m";

        exit(PHP_EOL . PHP_EOL);

    case 'app':
        if ($option !== 'setup') {
            print_error($option);
        }

        echo '[+] Application name (ex: TinyMVC): ';
        $app_name = fgets(STDIN);

        echo '[+] Application language (ex: en): ';
        $app_lang = fgets(STDIN);

        echo '[+] Application url (ex: http://example.com/): ';
        $app_url = fgets(STDIN);

        echo '[+] Application folder name (leave empty if using root folder): ';
        $app_folder = fgets(STDIN);

        echo '[+] MySQL hostname (ex: localhost): ';
        $mysql_host = fgets(STDIN);

        echo '[+] MySQL database name: ';
        $mysql_database = fgets(STDIN);

        echo '[+] MySQL database username: ';
        $mysql_username = fgets(STDIN);

        echo '[+] MySQL database password: ';
        $mysql_password = fgets(STDIN);

        $encryption_key = base64_encode(random_string(30, true));

        $config = [
            'APP_NAME' => $app_name,
            'APP_LANG' => $app_lang,
            'APP_FOLDER' => $app_folder,
            'APP_URL' => $app_url,
            'MYSQL_HOST' => $mysql_host,
            'MYSQL_DATABASE' => $mysql_database,
            'MYSQL_USERNAME' => $mysql_username,
            'MYSQL_PASSWORD' => $mysql_password,
            'ENCRYPTION_KEY' => $encryption_key
        ];

        save_env($config);

        echo PHP_EOL; 
        echo "\e[0;32;40m[+] Application has been setted up successfully\e[0m";
        exit(PHP_EOL . PHP_EOL);

    default:
        commands_list();
}
