#!/usr/bin/env/php 

<?php

/**
 * @copyright 2021 - N'Guessan Kouadio ElisÃ©e (eliseekn@gmail.com)
 * @license MIT (https://opensource.org/licenses/MIT)
 * @link https://github.com/eliseekn/tinymvc
 */

/**
 * Application command line interface
 */

require 'vendor/autoload.php';
require 'bootstrap.php';

array_shift($argv);

$commands = [
    'db',
    'make',
    'cache',
    'app'
];

$options = [
    'controller',
    'model',
    'migration',
    'seed',
    'schema',
    'query',
    'request',
    'middleware',
    'mail',
    'clear',
    'view',
    'setup'
];

$arguments = [
    '--create',
    '--delete',
    '--reset',
    '--namespace',
    '--resources',
    '--layout',
    '--run',
    '--tables',
    '--view'
];

function print_help()
{
    $help_message = 'Manage database operations' . PHP_EOL;
    $help_message .= '   db:schema --create database1,database2      Create list of databases' . PHP_EOL;
    $help_message .= '   db:schema --delete database                 Delete single database' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   db:migration --run                          Migrate all tables' . PHP_EOL;
    $help_message .= '   db:migration --run table                    Migrate single table' . PHP_EOL;
    $help_message .= '   db:migration --run --seed                   Migrate all tables and insert all seeds' . PHP_EOL;
    $help_message .= '   db:migration --reset                        Reset all migrations' . PHP_EOL;
    $help_message .= '   db:migration --reset table                  Reset single table' . PHP_EOL;
    $help_message .= '   db:migration --reset --seed                 Reset all migrations and insert all seeds' . PHP_EOL;
    $help_message .= '   db:migration --delete                       Drop all tables' . PHP_EOL;
    $help_message .= '   db:migration --delete table                 Drop single table' . PHP_EOL;
    $help_message .= '   db:migration --tables                       Display list of migrations tables' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   db:seed --run                               Insert all seeds' . PHP_EOL;
    $help_message .= '   db:seed --run seed                          Insert single seed' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= "   db:query --execute 'query'                  Execute MySQL query" . PHP_EOL;
    $help_message .= "   db:query --execute 'query' --db=database    Execute MySQL query on the database 'database'" . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= 'Manage resources build operations' . PHP_EOL;
    $help_message .= '   make:controller table                       Create table controller' . PHP_EOL;
    $help_message .= '   make:controller table --namespace=blog      Create table controller in app\Controllers\Blog folder' . PHP_EOL;
    $help_message .= '   make:controller table --resources           Create table resources (controller, migration, model, views and routes)' . PHP_EOL;
    $help_message .= '   make:controller table --view                Create table controller and view template' . PHP_EOL;
    $help_message .= '   make:controller table --view --layout=blog  Create table controller in app\Controllers\Blog folder and view template based on "blog" layout' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   make:migration table                        Create migration table' . PHP_EOL;
    $help_message .= '   make:migration table --cms                  Create migration table with controller = c, model = m, seed = s' . PHP_EOL;
    $help_message .= '   make:migration table --c --namespace=blog   Create migration table with controller in app\Controllers\Blog folder' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   make:model table                            Create single table model' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   make:seed table                             Create single table seed' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   make:view name                              Create blank view template' . PHP_EOL; 
    $help_message .= '   make:view name --layout=admin               Create view template based on "admin" layout' . PHP_EOL;
    $help_message .= '   make:view name --layout                     Create layout template' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   make:request AuthRequest                    Create AuthRequest in app\Requests folder' . PHP_EOL;
    $help_message .= '   make:middleware AuthPolicy                  Create AuthPolicy in app\Middlewares folder' . PHP_EOL;
    $help_message .= '   make:mail welcome                           Create welcome email resources' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= 'Miscellaneous commands' . PHP_EOL;
    $help_message .= '   cache:clear                                 Clear twig cache templates' . PHP_EOL;
    $help_message .= '   app:setup                                   Set up application configuration' . PHP_EOL;
    $help_message .=  PHP_EOL;
    
    exit($help_message);
}

function print_error(string $message, int $type = 0)
{
    if ($type === 0) {
        exit('[-] Invalid command line argument "' . $message . '". Type "php console" for commands list.' . PHP_EOL . PHP_EOL);
    } else {
        exit('[-] Missing command line argument. Type "php console" for commands list.' . PHP_EOL . PHP_EOL);
    }
}

if (!isset($argv[0])) {
    print_help();
}

if (strpos(strtolower($argv[0]), ':') === false) {
    print_error($argv[0]);
}

list($command, $option) = explode(':', $argv[0]);

if (!in_array($command, $commands) || !in_array($option, $options)) {
    print_error($argv[0]);
}

switch ($command) {
    case 'db':
        $argument = $argv[1] ?? null;

        if (is_null($argument)) {
            print_error('', 1);
        }

        if (strpos(strtolower($argument), '--') === false) {
            print_error($argument);
        }

        if (!in_array($argument, $arguments)) {
            print_error($argument);
        }

        $data = $argv[2] ?? null; 

        switch ($option) {
            case 'schema':
                if (is_null($data)) {
                    print_error('', 1);
                }

                switch ($argument) {
                    case '--create':
                        \Framework\Console\Database::createSchema($data);
                        exit(PHP_EOL);

                    case '--delete':
                        \Framework\Console\Database::deleteSchema($data);
                        exit(PHP_EOL);
                }

            case 'query':
                if ($argument !== '--execute') {
                    print_error($argument);
                }

                list($arg, $db) = isset($argv[3]) && strpos(strtolower($argv[3]), '=') !== false 
                    ? explode('=', $argv[3]) 
                    : (isset($argv[3]) ? [$argv[3], null] : [null, null]);

                $db = $arg === '--db' ? $db : null;

                if (!is_null($arg) && $arg !== '--db') {
                    print_error($arg);
                }

                \Framework\Console\Database::executeQuery($data, $db);
                exit(PHP_EOL);

            case 'migration':
                $data = !is_null($data) ? $data : '';
                $seed = !empty($data) && strpos(strtolower($data), '--') !== false ? $data : null;

                if (!is_null($seed) && $seed !== '--seed') {
                    print_error($seed);
                }

                $data = $data === '--seed' ? '' : $data;

                switch ($argument) {
                    case '--run':
                        \Framework\Console\Database::migrateTable($data);

                        if (!is_null($seed)) {
                            \Framework\Console\Database::runSeeder();
                        }

                        exit(PHP_EOL);

                    case '--reset':
                        \Framework\Console\Database::resetTable($data);

                        if (!is_null($seed)) {
                            \Framework\Console\Database::runSeeder();
                        }

                        exit(PHP_EOL);

                    case '--delete':
                        \Framework\Console\Database::deleteTable($data);
                        exit(PHP_EOL);

                    case '--tables':
                        print_r(\Framework\Console\Database::getMigrationsTables());
                        exit(PHP_EOL);
                }

            case 'seed':
                if ($argument !== '--run') {
                    print_error($argument);
                }

                $data = $data ?? '';

                \Framework\Console\Database::runSeeder($data);
                exit(PHP_EOL);

            default:
                print_error('', 1);
        }

    case 'make':
        $argument = $argv[2] ?? null;
        $data = $argv[1] ?? null; 

        switch ($option) {
            case 'controller':
                list($arg, $namespace) = isset($argument) && strpos(strtolower($argument), '=') !== false 
                    ? explode('=', $argument) 
                    : (isset($argument) ? [$argument, null] : [null, null]);

                if (is_null($arg)) {
                    if ($argument !== '--resources' || $argument !== '--view') {
                        print_error($argument);
                    }
                }

                $resources = $argument === '--resources';
                $view = $argument === '--view';

                if (!$resources && !$view) {
                    \Framework\Console\Make::makeController($data, $namespace);
                } 
                
                else {
                    if ($view) {
                        list($arg, $layout) = isset($argv[3]) && strpos(strtolower($argv[3]), '=') !== false 
                            ? explode('=', $argv[3]) 
                            : (isset($argv[3]) ? [$argv[3], null] : [null, null]);

                        if (is_null($arg)) {
                            \Framework\Console\Make::makeView($data, $layout);
                        } else {
                            if ($arg !== '--layout' || $arg !== '--namespace') {
                                print_error($arg);
                            }

                            \Framework\Console\Make::makeController($data, $layout);
                            \Framework\Console\Make::makeView($data, $layout);
                        }
                    }
                    
                    else if ($resources) {
                        \Framework\Console\Make::makeController($data, 'admin');
                        \Framework\Console\Make::makeMigration($data);
                        \Framework\Console\Make::makeModel($data);
                        \Framework\Console\Make::makeSeed($data);
                        \Framework\Console\Make::makeViews($data);
                        \Framework\Console\Make::makeRoute($data);
                    }
                }

                exit(PHP_EOL);

            case 'migration':
                \Framework\Console\Make::makeMigration($data);

                if (!is_null($argument)) {
                    list($arg, $namespace) = isset($argv[3]) && strpos(strtolower($argv[3]), '=') !== false 
                        ? explode('=', $argv[3]) 
                        : (isset($argv[3]) ? [$argv[3], null] : [null, null]);

                    $namespace = $arg === '--namespace' ? $namespace : null;

                    if (!is_null($arg) && $arg !== '--namespace') {
                        print_error($arg);
                    }

                    if ($argument === '--m') {
                        \Framework\Console\Make::makeModel($data);
                    } else if ($argument === '--c') {
                        \Framework\Console\Make::makeController($data, $namespace);
                    } else if ($argument === '--s') {
                        \Framework\Console\Make::makeSeed($data);
                    } else if ($argument === '--mc' || $argument === '--cm') {
                        \Framework\Console\Make::makeController($data, $namespace);
                        \Framework\Console\Make::makeModel($data);
                    } else if ($argument === '--ms' || $argument === '--sm') {
                        \Framework\Console\Make::makeModel($data);
                        \Framework\Console\Make::makeSeed($data);
                    } else if ($argument === '--cs' || $argument === '--sc') {
                        \Framework\Console\Make::makeController($data, $namespace);
                        \Framework\Console\Make::makeSeed($data);
                    } else if (in_array($argument, ['--mcs', '--msc', '--csm', '--cms', '--smc', '--scm'])) {
                        \Framework\Console\Make::makeController($data, $namespace);
                        \Framework\Console\Make::makeModel($data);
                        \Framework\Console\Make::makeSeed($data);
                    } else {
                        print_error($argument);
                    }
                }
                
                exit(PHP_EOL);

            case 'view':
                if (is_null($argument)) {
                    \Framework\Console\Make::makeView($data);
                    exit();
                }

                $layout = $argument === '--layout';

                if ($layout) {
                    \Framework\Console\Make::makeView(null, $data);
                } else {
                    list($arg, $layout) = isset($argument) && strpos(strtolower($argument), '=') !== false 
                        ? explode('=', $argument) 
                        : (isset($argument) ? [$argument, null] : [null, null]);

                    if ($arg !== '--layout') {
                        print_error($arg);
                    }

                    \Framework\Console\Make::makeView($data, $layout);
                }

                exit(PHP_EOL);

            case 'model':
                \Framework\Console\Make::makeModel($data);
                exit(PHP_EOL);

            case 'seed':
                \Framework\Console\Make::makeSeed($data);
                exit(PHP_EOL);

            case 'mail':
                \Framework\Console\Make::makeMail($data);
                exit(PHP_EOL);

            case 'middleware':
                \Framework\Console\Make::makeMiddleware($data);
                exit(PHP_EOL);

            case 'request':
                \Framework\Console\Make::makeRequest($data);
                exit(PHP_EOL);

            default:
                print_error('', 1);
        }

    case 'cache':
        if ($option !== 'clear') {
            print_error($option);
        }

        \Framework\Support\Storage::path(config('storage.cache'))->deleteDir();
        echo '[+] Cache cleared succesfully' . PHP_EOL;

        exit(PHP_EOL);

    case 'app':
        if ($option !== 'setup') {
            print_error($option);
        }

        echo '[+] Application name (ex: TinyMVC): ';
        $app_name = fgets(STDIN);

        echo '[+] Application language (ex: en): ';
        $app_lang = fgets(STDIN);

        echo '[+] Application url (ex: http://example.com/): ';
        $app_url = fgets(STDIN);

        echo '[+] Application folder name (leave empty if using root folder): ';
        $app_folder = fgets(STDIN);

        echo '[+] MySQL hostname (ex: localhost): ';
        $mysql_host = fgets(STDIN);

        echo '[+] MySQL database name: ';
        $mysql_database = fgets(STDIN);

        echo '[+] MySQL database username: ';
        $mysql_username = fgets(STDIN);

        echo '[+] MySQL database password: ';
        $mysql_password = fgets(STDIN);

        $encryption_key = base64_encode(random_string(30, true));

        $config = [
            'APP_NAME' => $app_name,
            'APP_LANG' => $app_lang,
            'APP_FOLDER' => $app_folder,
            'APP_URL' => $app_url,
            'MYSQL_HOST' => $mysql_host,
            'MYSQL_DATABASE' => $mysql_database,
            'MYSQL_USERNAME' => $mysql_username,
            'MYSQL_PASSWORD' => $mysql_password,
            'ENCRYPTION_KEY' => $encryption_key
        ];

        save_env($config);

        echo PHP_EOL . '[+] Application has been setted up successfully' . PHP_EOL;
        exit(PHP_EOL);


    default:
        print_help();
}
