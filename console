#!/usr/bin/env/php 

<?php

/**
 * @copyright 2021 - N'Guessan Kouadio ElisÃ©e (eliseekn@gmail.com)
 * @license MIT (https://opensource.org/licenses/MIT)
 * @link https://github.com/eliseekn/tinymvc
 */

/**
 * Application command line interface
 */

require_once 'vendor/autoload.php';
require_once 'config/env.php';

array_shift($argv);

$commands = [
    'db',
    'make',
    'cache'
];

$options = [
    'controller',
    'model',
    'migration',
    'seed',
    'schema',
    'query',
    'request',
    'middleware',
    'mail',
    'clear'
];

$arguments = [
    '--create',
    '--delete',
    '--reset',
    '--namespace',
    '--resources',
    '--account',
    '--run',
    '--tables'
];

function print_help()
{
    $help_message = 'Manage database operations' . PHP_EOL;
    $help_message .= '   db:schema --create database                Create single database with utf8 encoding character' . PHP_EOL;
    $help_message .= '   db:schema --create database1,database2     Create list of databases' . PHP_EOL;
    $help_message .= '   db:schema --delete database                Delete single database' . PHP_EOL;
    $help_message .= '   db:schema --delete database1,database2     Delete list of databases' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   db:migration --run                         Migrate all tables' . PHP_EOL;
    $help_message .= '   db:migration --run table                   Migrate single table' . PHP_EOL;
    $help_message .= '   db:migration --run table1,table2           Migrate list of tables' . PHP_EOL;
    $help_message .= '   db:migration --run --seed                  Migrate all tables and insert all seeds' . PHP_EOL;
    $help_message .= '   db:migration --reset                       Reset all migrations' . PHP_EOL;
    $help_message .= '   db:migration --reset table                 Reset single table' . PHP_EOL;
    $help_message .= '   db:migration --reset --seed                Reset all migrations and insert all seeds' . PHP_EOL;
    $help_message .= '   db:migration --delete                      Drop all tables' . PHP_EOL;
    $help_message .= '   db:migration --delete table                Drop single table' . PHP_EOL;
    $help_message .= '   db:migration --delete table1,table2        Drop list of tables tables' . PHP_EOL;
    $help_message .= '   db:migration --tables                      Display list of migrations tables' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   db:seed --run                              Insert all seeds' . PHP_EOL;
    $help_message .= '   db:seed --run seed                         Insert single seed' . PHP_EOL;
    $help_message .= '   db:seed --run seed1,seed1                  Insert list of seeds' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= "   db:query --execute 'query'                 Execute MySQL query" . PHP_EOL;
    $help_message .= "   db:query --execute 'query' --db=database   Execute MySQL query on the database 'database'" . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= 'Manage resources build operations' . PHP_EOL;
    $help_message .= '   make:controller table                      Create table controller' . PHP_EOL;
    $help_message .= '   make:controller table --namespace=blog     Create table controller in app\Controllers\Blog folder' . PHP_EOL;
    $help_message .= '   make:controller table --resources          Create admin resources for table (controller, migration, model, views and routes)' . PHP_EOL;
    $help_message .= '   make:controller table --account            Create account resource for table (controller, migration, model, views and routes)' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   make:migration table                       Create migration table' . PHP_EOL;
    $help_message .= '   make:migration table --cms                 Create migration table with controller = c, model = m, seed = s' . PHP_EOL;
    $help_message .= '   make:migration table --c --namespace=blog  Create migration table with controller in app\Controllers\Blog folder' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   make:model table                           Create single table model' . PHP_EOL;
    $help_message .= '   make:model table1,table2                   Create list of model' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   make:seed table                            Create single table seed' . PHP_EOL;
    $help_message .= '   make:seed table1,table2                    Create list of seeds' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= '   make:request AuthRequest                   Create AuthRequest in app\Requests folder' . PHP_EOL;
    $help_message .= '   make:middleware AuthPolicy                 Create AuthPolicy in app\Middlewares folder' . PHP_EOL;
    $help_message .= '   make:mail welcome                          Create welcome email resources' . PHP_EOL;
    $help_message .= PHP_EOL;
    $help_message .= 'Miscellaneous commands' . PHP_EOL;
    $help_message .= '   cache:clear                                Clear twig cache templates' . PHP_EOL;
    $help_message .=  PHP_EOL;
    
    exit($help_message);
}

function print_error(string $message, int $type = 0)
{
    if ($type === 0) {
        exit('[-] Invalid command line argument "' . $message . '". Type "php console" for commands list.' . PHP_EOL . PHP_EOL);
    } else {
        exit('[-] Missing command line argument. Type "php console" for commands list.' . PHP_EOL . PHP_EOL);
    }
}

if (!isset($argv[0])) {
    print_help();
}

if (strpos(strtolower($argv[0]), ':') === false) {
    print_error($argv[0]);
}

list($command, $option) = explode(':', $argv[0]);

if (!in_array($command, $commands) || !in_array($option, $options)) {
    print_error($argv[0]);
}

switch ($command) {
    case 'db':
        $argument = $argv[1] ?? null;

        if (is_null($argument)) {
            print_error('', 1);
        }

        if (strpos(strtolower($argument), '--') === false) {
            print_error($argument);
        }

        if (!in_array($argument, $arguments)) {
            print_error($argument);
        }

        $data = $argv[2] ?? null; 

        switch ($option) {
            case 'schema':
                if (is_null($data)) {
                    print_error('', 1);
                }

                switch ($argument) {
                    case '--create':
                        \Framework\Console\Database::createSchema($data);
                        break;

                    case '--delete':
                        \Framework\Console\Database::deleteSchema($data);
                        break;
                }
                
                break;

            case 'query':
                if ($argument !== '--execute') {
                    print_error($argument);
                }

                list($arg, $db) = isset($argv[3]) && strpos(strtolower($argv[3]), '=') !== false 
                    ? explode('=', $argv[3]) 
                    : (isset($argv[3]) ? [$argv[3], null] : [null, null]);

                $db = $arg === '--db' ? $db : null;

                if (!is_null($arg) && $arg !== '--db') {
                    print_error($arg);
                }

                \Framework\Console\Database::executeQuery($data, $db);
                break;

            case 'migration':
                $data = !is_null($data) ? $data : '';
                $seed = !empty($data) && strpos(strtolower($data), '--') !== false ? $data : null;

                if (!is_null($seed) && $seed !== '--seed') {
                    print_error($seed);
                }

                $data = $data === '--seed' ? '' : $data;

                switch ($argument) {
                    case '--run':
                        \Framework\Console\Database::migrateTable($data);

                        if (!is_null($seed)) {
                            \Framework\Console\Database::runSeeder();
                        }

                        break;

                    case '--reset':
                        \Framework\Console\Database::resetTable($data);

                        if (!is_null($seed)) {
                            \Framework\Console\Database::runSeeder();
                        }

                        break;

                    case '--delete':
                        \Framework\Console\Database::deleteTable($data);
                        break;

                    case '--tables':
                        print_r(\Framework\Console\Database::getMigrationsTables());
                        echo PHP_EOL;
                        break;
                }

                break;

            case 'seed':
                if ($argument !== '--run') {
                    print_error($argument);
                }

                $data = $data ?? '';

                \Framework\Console\Database::runSeeder($data);
                break;
        }

        break;

    case 'make':
        $argument = $argv[2] ?? null;
        $data = $argv[1] ?? null; 

        switch ($option) {
            case 'controller':
                list($arg, $namespace) = isset($argument) && strpos(strtolower($argument), '=') !== false 
                    ? explode('=', $argument) 
                    : (isset($argument) ? [$argument, null] : [null, null]);

                if (is_null($arg)) {
                    if ($argument !== '--resources' || $argument !== '--account') {
                        print_error($argument);
                    }
                }

                $resources = $argument === '--resources';
                $account = $argument === '--account';

                if (!$resources) {
                    \Framework\Console\Make::makeController($data, $namespace);
                } else if (!$account) {
                    \Framework\Console\Make::makeAccount($data);
                } else {
                    \Framework\Console\Make::makeController($data, 'admin');
                    \Framework\Console\Make::makeMigration($data);
                    \Framework\Console\Make::makeModel($data);
                    \Framework\Console\Make::makeSeed($data);
                    \Framework\Console\Make::makeViews($data);
                    \Framework\Console\Make::makeRoute($data);
                }

                break;

            case 'migration':
                \Framework\Console\Make::makeMigration($data);

                if (!is_null($argument)) {
                    list($arg, $namespace) = isset($argv[3]) && strpos(strtolower($argv[3]), '=') !== false 
                        ? explode('=', $argv[3]) 
                        : (isset($argv[3]) ? [$argv[3], null] : [null, null]);

                    $namespace = $arg === '--namespace' ? $namespace : null;

                    if (!is_null($arg) && $arg !== '--namespace') {
                        print_error($arg);
                    }

                    if ($argument === '--m') {
                        \Framework\Console\Make::makeModel($data);
                    } else if ($argument === '--c') {
                        \Framework\Console\Make::makeController($data, $namespace);
                    } else if ($argument === '--s') {
                        \Framework\Console\Make::makeSeed($data);
                    } else if ($argument === '--mc' || $argument === '--cm') {
                        \Framework\Console\Make::makeController($data, $namespace);
                        \Framework\Console\Make::makeModel($data);
                    } else if ($argument === '--ms' || $argument === '--sm') {
                        \Framework\Console\Make::makeModel($data);
                        \Framework\Console\Make::makeSeed($data);
                    } else if ($argument === '--cs' || $argument === '--sc') {
                        \Framework\Console\Make::makeController($data, $namespace);
                        \Framework\Console\Make::makeSeed($data);
                    } else if (in_array($argument, ['--mcs', '--msc', '--csm', '--cms', '--smc', '--scm'])) {
                        \Framework\Console\Make::makeController($data, $namespace);
                        \Framework\Console\Make::makeModel($data);
                        \Framework\Console\Make::makeSeed($data);
                    } else {
                        print_error($argument);
                    }
                }
                
                break;

            case 'model':
                \Framework\Console\Make::makeModel($data);
                break;

            case 'seed':
                \Framework\Console\Make::makeSeed($data);
                break;

            case 'mail':
                \Framework\Console\Make::makeMail($data);
                break;

            case 'middleware':
                \Framework\Console\Make::makeMiddleware($data);
                break;

            case 'request':
                \Framework\Console\Make::makeRequest($data);
                break;
        }

        break;

    case 'cache':
        if ($option !== 'clear') {
            print_error($option);
        }

        \Framework\Support\Storage::path(config('storage.cache'))->deleteDir();
        echo '[+] Cache cleared succesfully' . PHP_EOL;

        break;

    default:
        print_help();
}
